---
import { getCollection } from "astro:content";

export interface Props {
  autoplay?: boolean;
  autoplayDelay?: number;
  showDots?: boolean;
  showArrows?: boolean;
  className?: string;
  lightbox?: boolean;
}

const {
  autoplay = true,
  autoplayDelay = 2500,
  showDots = true,
  showArrows = true,
  className = "",
  lightbox = true,
} = Astro.props;

// Get images from gallery collection
const gallery = await getCollection("gallery");
// console.log("Gallery collection:", gallery); // Debug log
const galleryImages = gallery.map((item: any) => ({
  src: item.data.image,
  alt: item.data.alt,
  title: item.data.title,
}));
// console.log("Gallery images:", galleryImages); // Debug log

const carouselId = `carousel-${Math.random().toString(36).slice(2, 9)}`;
---

<div
  class={`photo-carousel relative lg:max-w-[50%] sm:max-w-[100%] md:max-w-[70%] mx-auto ${className}`}
  data-carousel-id={carouselId}
>
  <div
    class="carousel-container relative overflow-hidden rounded-lg bg-gray-100 shadow-lg"
  >
    <div
      class="carousel-track flex transition-transform duration-300 ease-in-out"
      data-track
    >
      {
        galleryImages.map(
          (image: { src: any; alt: string; title: string }, index: number) => (
            <div
              class="carousel-slide min-w-full relative flex flex-col overflow-hidden"
              data-slide={index}
            >
              {lightbox ? (
                <a href={image.src.src || image.src} class="glightbox block">
                  <img
                    src={image.src}
                    alt={image.alt}
                    class="w-full h-auto max-h-140 md:max-h-[500px] object-cover"
                    loading={index < 3 ? "eager" : "lazy"}
                    fetchpriority={index < 3 ? "high" : "auto"}
                  />
                </a>
              ) : (
                <img
                  src={image.src}
                  alt={image.alt}
                  class="w-full h-auto max-h-140 md:max-h-[500px]"
                  loading={index < 3 ? "eager" : "lazy"}
                  fetchpriority={index < 3 ? "high" : "auto"}
                  decoding="async"
                  width="1192"
                  height="748"
                />
              )}
              {image.title && (
                <div class="slide-caption absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent text-white p-4 md:p-6">
                  <p class="text-sm md:text-base leading-relaxed">
                    {image.title}
                  </p>
                </div>
              )}
            </div>
          ),
        )
      }
    </div>

    {
      showArrows && galleryImages.length > 1 && (
        <>
          <button
            class="carousel-arrow carousel-arrow-prev absolute left-2 md:left-3 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white border-0 rounded-full w-8 h-8 md:w-10 md:h-10 flex items-center justify-center cursor-pointer transition-all duration-200 hover:scale-110 z-10 text-gray-700 shadow-md"
            data-prev-btn
            aria-label="Previous image"
          >
            <svg
              class="w-4 h-4 md:w-5 md:h-5"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              viewBox="0 0 24 24"
            >
              <polyline points="15,18 9,12 15,6" />
            </svg>
          </button>
          <button
            class="carousel-arrow lg carousel-arrow-next absolute right-2 md:right-3 top-1/2 -translate-y-1/2 bg-white/90 hover:bg-white border-0 rounded-full w-8 h-8 md:w-10 md:h-10 flex items-center justify-center cursor-pointer transition-all duration-200 hover:scale-110 z-10 text-gray-700 shadow-md"
            data-next-btn
            aria-label="Next image"
          >
            <svg
              class="w-4 h-4 md:w-5 md:h-5"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              viewBox="0 0 24 24"
            >
              <polyline points="9,18 15,12 9,6" />
            </svg>
          </button>
        </>
      )
    }
  </div>

  {
    showDots && galleryImages.length > 1 && (
      <div class="carousel-dots flex justify-center gap-2 mt-4">
        {galleryImages.map((_: any, index: number) => (
          <button
            class={`carousel-dot w-3 h-3 rounded-full border-0 cursor-pointer transition-colors duration-200 ${
              index === 0
                ? "bg-blue-500 hover:bg-blue-600"
                : "bg-gray-300 hover:bg-gray-400"
            }`}
            data-dot={index}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    )
  }
</div>

<script define:vars={{ autoplay, autoplayDelay }}>
  class PhotoCarousel {
    constructor(element) {
      this.carousel = element;
      this.track = element.querySelector("[data-track]");
      this.slides = element.querySelectorAll("[data-slide]");
      this.prevBtn = element.querySelector("[data-prev-btn]");
      this.nextBtn = element.querySelector("[data-next-btn]");
      this.dots = element.querySelectorAll("[data-dot]");

      this.currentIndex = 0;
      this.autoplayTimer = null;

      this.init();
    }

    init() {
      if (this.slides.length <= 1) return;

      this.bindEvents();

      if (autoplay) {
        this.startAutoplay();
        this.carousel.addEventListener("mouseenter", () => this.stopAutoplay());
        this.carousel.addEventListener("mouseleave", () =>
          this.startAutoplay(),
        );
      }

      this.updateCarousel();
    }

    bindEvents() {
      this.prevBtn?.addEventListener("click", (e) => {
        e.preventDefault();
        this.goToPrev();
      });

      this.nextBtn?.addEventListener("click", (e) => {
        e.preventDefault();
        this.goToNext();
      });

      this.dots.forEach((dot, index) => {
        dot.addEventListener("click", (e) => {
          e.preventDefault();
          this.goToSlide(index);
        });
      });

      // Touch/swipe support
      let startX = 0;
      let currentX = 0;
      let isDragging = false;

      this.carousel.addEventListener(
        "touchstart",
        (e) => {
          startX = e.touches[0].clientX;
          isDragging = true;
          this.stopAutoplay();
        },
        { passive: true },
      );

      this.carousel.addEventListener(
        "touchmove",
        (e) => {
          if (!isDragging) return;
          currentX = e.touches[0].clientX;
        },
        { passive: true },
      );

      this.carousel.addEventListener(
        "touchend",
        () => {
          if (!isDragging) return;

          const diff = startX - currentX;
          const threshold = 50;
          const isRTL =
            document.documentElement.dir === "rtl" ||
            document.body.dir === "rtl";

          if (Math.abs(diff) > threshold) {
            // Invert swipe logic for RTL
            if (isRTL) {
              if (diff > 0) {
                this.goToPrev();
              } else {
                this.goToNext();
              }
            } else {
              if (diff > 0) {
                this.goToNext();
              } else {
                this.goToPrev();
              }
            }
          }

          isDragging = false;
          if (autoplay) this.startAutoplay();
        },
        { passive: true },
      );

      // Keyboard navigation
      this.carousel.addEventListener("keydown", (e) => {
        const isRTL =
          document.documentElement.dir === "rtl" || document.body.dir === "rtl";

        if (e.key === "ArrowLeft") {
          e.preventDefault();
          // In RTL, left arrow should go to next
          isRTL ? this.goToNext() : this.goToPrev();
        } else if (e.key === "ArrowRight") {
          e.preventDefault();
          // In RTL, right arrow should go to previous
          isRTL ? this.goToPrev() : this.goToNext();
        }
      });

      this.carousel.setAttribute("tabindex", "0");
    }

    goToSlide(index) {
      this.currentIndex = index;
      this.updateCarousel();
    }

    goToNext() {
      this.currentIndex = (this.currentIndex + 1) % this.slides.length;
      this.updateCarousel();
    }

    goToPrev() {
      this.currentIndex =
        this.currentIndex === 0
          ? this.slides.length - 1
          : this.currentIndex - 1;
      this.updateCarousel();
    }

    updateCarousel() {
      // Check if we're in RTL mode
      const isRTL =
        document.documentElement.dir === "rtl" || document.body.dir === "rtl";
      const translateX = isRTL
        ? this.currentIndex * 100
        : -this.currentIndex * 100;
      this.track.style.transform = `translateX(${translateX}%)`;

      this.dots.forEach((dot, index) => {
        if (index === this.currentIndex) {
          dot.className = dot.className.replace(
            "bg-gray-300 hover:bg-gray-400",
            "bg-blue-500 hover:bg-blue-600",
          );
        } else {
          dot.className = dot.className.replace(
            "bg-blue-500 hover:bg-blue-600",
            "bg-gray-300 hover:bg-gray-400",
          );
        }
      });
    }

    startAutoplay() {
      if (!autoplay || this.slides.length <= 1) return;

      this.autoplayTimer = setInterval(() => {
        this.goToNext();
      }, autoplayDelay);
    }

    stopAutoplay() {
      if (this.autoplayTimer) {
        clearInterval(this.autoplayTimer);
        this.autoplayTimer = null;
      }
    }
  }

  function initCarousels() {
    const carousels = document.querySelectorAll(".photo-carousel");
    carousels.forEach((carousel) => {
      if (!carousel.dataset.initialized) {
        new PhotoCarousel(carousel);
        carousel.dataset.initialized = "true";
      }
    });
  }

  document.addEventListener("DOMContentLoaded", initCarousels);
  document.addEventListener("astro:page-load", initCarousels);
</script>
